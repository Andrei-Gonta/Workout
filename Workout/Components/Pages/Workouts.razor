@page "/workouts={id}"
@using Data_Base_Access
@using Data_Base_Access.Entities
@using Data_Base_Access.Repositories.NewFolder.IGenericRepository
@using Data_Base_Access.Repositories.WorkoutRepository
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IGenericRepository<Workout> workoutRepository
@inject IGenericRepository<Users> userRepository
@inject NavigationManager NavigationManager




<h3>
    Workouts for <b>@user.Name @user.Surname</b>
</h3>
    

@if (WorkoutsList == null)
{
    <p><em>No Workouts for this user</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Client ID</th>
                <th>Client Name</th>
                <th>Client Surname</th>
                <th>Duration</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workout in WorkoutsList)
            {
                <tr>
                    <td>@workout.CientID</td>
                    <td>@workout.User.Name</td>
                    <td>@workout.User.Surname</td>
                    <td>@workout.Duration</td>
                    <td>@workout.Date</td>
                    <td class="actions">
                        <button class="btn-info" @onclick="() => ViewInfo(workout.Id)">View Info</button>
                    
                        <button class="btn-delete" @onclick="@(() =>Delete(workout.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <button class="btn btn-primary btn-add" @onclick="() => GoToAddWorkout(user.Id)">Add Workout</button>


}

@code
{
    public IEnumerable<Workout> WorkoutsList;
    private Users user = new Users();

    [Parameter]
    public string id { get; set; }
    public int userID;



    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        userID = Convert.ToInt32(id);
        user = await userRepository.GetByIDAsync(userID);
        WorkoutsList = await  workoutRepository.GetWorkoutsByUserId(userID);
    }

    public void GoToAddWorkout(int id)
    {
        NavigationManager.NavigateTo($"/addworkout={id}");
    }

    void ViewInfo(int id)
    {
        NavigationManager.NavigateTo($"/workoutdetails={id}");
    }
    async Task Delete(int id)
    {

        await workoutRepository.DeleteAsync(id);
        await Task.Delay(100);
    }

}